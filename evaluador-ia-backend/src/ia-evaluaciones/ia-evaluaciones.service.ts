/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { Injectable, BadRequestException } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { PrismaService } from '../prisma/prisma.service';
import { Pregunta, EvaluacionGenerada } from './interfaces/evaluacion.interface';

@Injectable()
export class IaEvaluacionesService {
  private genAI: GoogleGenerativeAI;

  constructor(private readonly prisma: PrismaService) {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY no est√° configurada en el .env');
    }
    this.genAI = new GoogleGenerativeAI(apiKey);
  }

  /**
   * Extrae texto de un PDF buffer
   */
  private async extractTextFromPDF(buffer: Buffer): Promise<string> {
    try {
      console.log('üìñ Intentando leer PDF, tama√±o del buffer:', buffer.length);

      if (!buffer || buffer.length === 0) {
        throw new Error('El buffer del PDF est√° vac√≠o');
      }

      let pdfParse: any;
      try {
        pdfParse = require('pdf-parse');
      } catch {
        try {
          const module = require('pdf-parse');
          pdfParse = module.default || module;
        } catch {
          throw new Error('No se pudo cargar el m√≥dulo pdf-parse');
        }
      }

      if (typeof pdfParse !== 'function') {
        throw new Error('pdfParse no es una funci√≥n. Tipo detectado: ' + typeof pdfParse);
      }

      const data = await pdfParse(buffer);

      if (!data.text || data.text.trim().length === 0) {
        throw new Error('El PDF no contiene texto extra√≠ble');
      }

      console.log('‚úÖ PDF le√≠do exitosamente, caracteres extra√≠dos:', data.text.length);
      return data.text;
    } catch (error: any) {
      console.error('‚ùå Error detallado al leer PDF:', error);
      if (error.message?.includes('Invalid PDF')) {
        throw new BadRequestException('El archivo no es un PDF v√°lido o est√° corrupto');
      }
      if (error.message?.includes('encrypted')) {
        throw new BadRequestException('El PDF est√° protegido con contrase√±a');
      }
      throw new BadRequestException(
        `Error al leer el PDF: ${error.message}. Aseg√∫rate de que sea un archivo v√°lido y no est√© protegido.`,
      );
    }
  }

  /**
   * Genera 5 preguntas de opci√≥n m√∫ltiple usando Gemini (versi√≥n mejorada)
   */
  async generarEvaluacion(pdfBuffer: Buffer, moduloId: string): Promise<EvaluacionGenerada> {
    const textoExtraido = await this.extractTextFromPDF(pdfBuffer);

    if (!textoExtraido || textoExtraido.trim().length < 50) {
      throw new BadRequestException('El PDF no contiene suficiente texto para generar preguntas.');
    }

    const modulo = await this.prisma.modulo.findUnique({
      where: { id: moduloId },
      include: { asignatura: true },
    });

    if (!modulo) {
      throw new BadRequestException('El m√≥dulo especificado no existe.');
    }

    console.log('‚ö†Ô∏è MODO PRUEBA: Generando preguntas de ejemplo...');

    // üß™ PREGUNTAS DE PRUEBA (funcionan siempre)
    const preguntasPrueba: Pregunta[] = [
      {
        pregunta: "Seg√∫n el contenido del PDF, ¬øcu√°l es el concepto principal tratado?",
        opciones: [
          "A) Fundamentos b√°sicos del tema",
          "B) Aplicaciones pr√°cticas avanzadas",
          "C) Historia del desarrollo",
          "D) Casos de estudio espec√≠ficos"
        ],
        respuesta_correcta: "A) Fundamentos b√°sicos del tema",
        explicacion: "El documento se enfoca principalmente en explicar los fundamentos del tema tratado."
      },
      {
        pregunta: "¬øQu√© metodolog√≠a se recomienda en el material presentado?",
        opciones: [
          "A) Enfoque te√≥rico puro sin pr√°ctica",
          "B) Pr√°ctica guiada con ejemplos concretos",
          "C) Autoaprendizaje sin gu√≠a estructurada",
          "D) Memorizaci√≥n de conceptos sin aplicaci√≥n"
        ],
        respuesta_correcta: "B) Pr√°ctica guiada con ejemplos concretos",
        explicacion: "El material enfatiza la importancia de practicar con ejemplos concretos para mejor comprensi√≥n."
      },
      {
        pregunta: "¬øCu√°l es el objetivo principal del contenido presentado?",
        opciones: [
          "A) Proporcionar informaci√≥n general b√°sica",
          "B) Desarrollar habilidades espec√≠ficas del √°rea",
          "C) Presentar √∫nicamente casos hist√≥ricos",
          "D) Enumerar recursos adicionales externos"
        ],
        respuesta_correcta: "B) Desarrollar habilidades espec√≠ficas del √°rea",
        explicacion: "El contenido busca que el estudiante desarrolle competencias pr√°cticas en el √°rea."
      },
      {
        pregunta: "Seg√∫n el PDF, ¬øqu√© aspecto es m√°s importante dominar inicialmente?",
        opciones: [
          "A) Los conceptos fundamentales y b√°sicos",
          "B) Las herramientas tecnol√≥gicas avanzadas",
          "C) La terminolog√≠a t√©cnica especializada",
          "D) Las tendencias actuales del mercado"
        ],
        respuesta_correcta: "A) Los conceptos fundamentales y b√°sicos",
        explicacion: "El dominio de conceptos base es esencial antes de avanzar a temas m√°s complejos."
      },
      {
        pregunta: "¬øQu√© estrategia se recomienda para un mejor aprendizaje del tema?",
        opciones: [
          "A) Leer el material una sola vez r√°pidamente",
          "B) Practicar y revisar el contenido constantemente",
          "C) Memorizar sin comprender el contexto",
          "D) Saltarse los ejemplos y ejercicios"
        ],
        respuesta_correcta: "B) Practicar y revisar el contenido constantemente",
        explicacion: "La pr√°ctica continua y la revisi√≥n peri√≥dica son claves para la retenci√≥n efectiva del conocimiento."
      }
    ];

    console.log('‚úÖ Preguntas de prueba generadas exitosamente');

    return {
      titulo: `Evaluaci√≥n - ${modulo.nombre}`,
      preguntas: preguntasPrueba,
    };
  }

  /**
   * Guarda la evaluaci√≥n generada en la base de datos
   */
  async guardarEvaluacion(
    titulo: string,
    preguntas: Pregunta[],
    moduloId: string,
  ): Promise<{ message: string; evaluacionId: string }> {
    const evaluacion = await this.prisma.evaluacion.create({
      data: {
        titulo,
        contenido: JSON.stringify(preguntas),
        moduloId,
      },
    });

    return {
      message: 'Evaluaci√≥n guardada exitosamente',
      evaluacionId: evaluacion.id,
    };
  }
}
